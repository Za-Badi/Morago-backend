type User {
    id: ID!
    phone: String!
    firstName: String
    lastName: String
    balance: Float
    fcmToken: String
    apnToken: String
    ratings: Float
    totalRatings: Int
    isActive: Boolean
    isDebtor: Boolean
    onBoardingStatus: Int
    translatorProfile: TranslatorProfile
    userProfile: UserProfile
}

type UserProfile {
    id: ID!
    isFreeCallMade: Boolean
    user: User
}

type TranslatorProfile {
    id: ID!
    dateOfBirth: String
    email: String
    isAvailable: Boolean
    isOnline: Boolean
    levelOfKorean: String
    user: User
}

type Language {
    id: ID!
    name: String
}

type Query {
    getAllUsers: [User]
    getUserById(id: ID): User
    getAllUserProfiles: [UserProfile]
    getUserProfileById(id: ID): UserProfile
    getAllTranslatorProfiles: [TranslatorProfile]
    getTranslatorProfileById(id: ID): TranslatorProfile
    getAllLanguages: [Language]
    getLanguageById(id: ID): Language
}

type Mutation {
    addUser(userDto: UserInput): User
    updateUser(id: ID, userDto: UserInput): User
    deleteUser(id: ID): Boolean
    addTranslatorProfile(translatorProfileDto: TranslatorProfileInput): TranslatorProfile
    updateTranslatorProfile(id: ID, translatorProfileDto: TranslatorProfileInput): TranslatorProfile
    deleteTranslatorProfile(id: ID): Boolean
    addLanguage(languageDto: LanguageInput): Language
    updateLanguage(id: ID, languageDto: LanguageInput): Language
    deleteLanguage(id: ID): Boolean
}

input UserInput {
    phone: String!
    password: String
    firstName: String
    lastName: String
}

input TranslatorProfileInput {
    dateOfBirth: String
    email: String
    isAvailable: Boolean
    isOnline: Boolean
    levelOfKorean: String
    languages: [ID]
    user: ID
}

input LanguageInput {
    name: String
}