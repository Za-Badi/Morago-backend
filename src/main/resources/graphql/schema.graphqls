schema {
    query: Query
    mutation: Mutation
}
type Query {

    getCoinById(id: ID!): Coin
    getAllCoins: [Coin]

    getAppVersionByPlatform(platform: EPlatform!): AppVersion
    getAllAppVersions:[AppVersion]

    getAllCategories: [Category]
    getCategoryById(id: ID!): Category
    getCategoryByName(name: String!): Category
    getCategoryByStatus(status: Boolean!): [Category]

    getAllThemes:[Theme]
    getThemeById(id: ID!): Theme
    getThemesByCategoriesId(id: ID): [Theme]
    getThemesByName(name: String): Theme
    getThemeByStatus(status: Boolean!): [Theme]

    getAllFrequentlyAskedQuestionById:[FrequentlyAskedQuestionsInput]
    getFrequentlyAskedQuestionById(id: ID!): FrequentlyAskedQuestionsInput
    getAllUsers: [User]



    getUserById(id: ID!): User
    getUserByPhone(phone: String): User
#

#
    getAllDeposits: [Deposits]
    getDepositById(id: ID!): Deposits
    getDepositsByStatus(status: PaymentStatus!):[Deposits]
    getDepositsByUserId(userId: ID!): [Deposits]

    getAllCalls: [Call]
    getCallById(id : ID!): Call
    getAllFreeCalls : [Call]
    getCallsByUserId(userid : ID!) : [Call]
    getMissedCalls(userId: ID!, page: Int!, size: Int!): CallPage!
    getCallsByOutgoingIncoming(page : Int!, size : Int!): CallPage!
    getCallsByOutgoingIncomingStatus(status : CallStatus, page : Int!, size : Int!) : CallPage!

    getAllRatings : [Rating]
    getRatingById (id : ID!) : Rating
    getAverageRating(toWhomUserId : ID!) : Float

}

type Mutation {


    createAppVersion(platform: EPlatform!, min: String!, latest: String!): AppVersion
    updateAppVersion(platform: EPlatform!, min: String, latest: String): AppVersion
    deleteAppVersion(platform: EPlatform!): Boolean

    createCoin(input: CreateCoinInput): Coin
    updateCoin(input: UpdateCoinInput): Coin
    deleteCoin(id: ID!): Boolean

    createCategory(input: CreateCategoryInput): Category
    updateCategory(input: UpdateCategoryInput): Category
    deleteCategoryById(id: ID!): Boolean
    changeCategoryStatus(id: ID!): Boolean

    createTheme(input: CreateThemeInput): Theme
    updateThemeById(input: UpdateThemeInput): Theme
    deleteThemeById(id: ID!): Boolean
    changeThemeStatus(id: ID!): Boolean
    changeThemePopularity(id: ID, themePopularity: Boolean ): Boolean

    createFrequentlyAskedQuestion(input: CreateFrequentlyAskedQuestionsInput): FrequentlyAskedQuestionsInput
    updateFrequentlyAskedQuestion(input: updateFrequentlyAskedQuestionsInput): FrequentlyAskedQuestionsInput
    deleteFrequentlyAskedQuestionById(id: ID!): Boolean
    addUser(userInput: UserInput): User
    updateUser(id: ID, userInput: UserInput): User
    deleteUser(id: ID): Boolean

    changeIsActive(id: ID): Boolean
    changeIsDebtor(id: ID): Boolean
    addFcmToken(fcmToken: String, id: ID): User
    deleteFcmToken(id: ID): Boolean
    addApnToken(apnToken: String, id: ID): User
    deleteApnToken(id: ID): Boolean

    addFile(file: Upload!): File
    addDeposit(createDepositsInput: CreateDepositsInput): Deposits
    updateDeposit(id: ID!, updateDepositsInput: UpdateDepositsInput): Deposits
    deleteDeposit(id: ID!): Boolean

    createCall(input : CreateCallInput) : Call
    updateCall(id : ID!, input : CallUpdateInput) : Call
    deleteCall(id : ID!) : Boolean

    updateRating(id: ID!, update : UpdateRatingInput): Rating
    createRating(ratingInput : RatingInput): Rating
    deleteRating(id: ID!): Boolean
}




type AppVersion {
    platform: EPlatform
    min: String
    latest: String
    createdAt: String
    updatedAt: String
}
type Coin {
    id: ID
    coin: String
    won: String
    createdAt: String
    updatedAt: String
}
type File {
    id: ID
    path: String
    type: String
    originalTitle: String
    createdAt: String
    updatedAt: String
}
type Category {
    id: ID
    name: String
    isActive: Boolean
}
type Theme {
    id: ID
    name: String
    koreanTitle: String
    price: Float
    nightPrice: Float
    description: String
    isPopular: Boolean
    isActive: Boolean
    category: Category
    icon: File
    createdAt: String
    updatedAt: String
}
type FrequentlyAskedQuestionsInput{
    question: String
    answer: String
    Category: QuestionsCategories
}
type Language {
    id: ID!
    name: String
}
type User {
    id: ID!
    phone: String!
    firstName: String
    lastName: String
    balance: Float
    fcmToken: String
    apnToken: String
    ratings: Float
    totalRatings: Int
    isActive: Boolean
    isDebtor: Boolean
    onBoardingStatus: Int
    translatorProfile: TranslatorProfile
    userProfile: UserProfile
}
type UserPage {
    content: [User]
    totalPages: Int
    totalElements: Int
    size: Int
    number: Int
}
type UserProfile {
    id: ID!
    isFreeCallMade: Boolean
}
type TranslatorProfile {
    id: ID!
    dateOfBirth: String
    email: String
    isAvailable: Boolean
    isOnline: Boolean
    levelOfKorean: String
}
type Call {
    id: ID
    caller: User
    recipient: User
    createdAt: String
    duration: Int
    status: CallStatus
    sum: Float
    commission: Float
    translatorHasRated: Boolean
    userHasRated: Boolean
    file: File
    theme: Theme
}
type Rating {
    id: ID!
    whoUser: User!
    toWhomUser: User!
    createdAt: String
    updatedAt: String
    ratings: Float
}


type Deposits {
    id: ID!
    accountHolder: String
    nameOfBank: String
    coin: Float
    won: Float
    status: PaymentStatus
    createdAt: String
    updatedAt: String
    user: User
}
input CreateDepositsInput {
    accountHolder: String!
    nameOfBank: String!
    coin: Float
    status: PaymentStatus
    won: Float
    userId: ID!
}

input UpdateDepositsInput {
    accountHolder: String!
    nameOfBank: String!
    status: PaymentStatus
    coin: Float
    won: Float
}

type Notification {
    id: ID!
    title: String!
    text: String!
    date: String
    time: String
    user: User!
}

type PageOutput {
    currentPage: Int
    totalPages: Int
    totalElements: Int
    objectList: [Call]
}


input CreateNotificationInput {
    title: String!
    text: String!

    userId: ID!
}

input UpdateNotificationInput {
    title: String!
    text: String!

}


type Withdrawals {
    id: ID!
    accountNumber: String!
    accountHolder: String!
    sum: Float!
    status: PaymentStatus
    createdAt: String
    updatedAt: String
    user: User
}


type PageInfo {
    totalPages: Int!
    totalElements: Int!
    currentPage: Int!
    pageSize: Int!
}
type CallPage {
    content: [Call!]!
    pageInfo: PageInfo!
}


input CreateWithdrawalsInput {
    accountNumber: String!
    accountHolder: String!
    sum: Float
    status: PaymentStatus
    userId: ID!
}

input UpdateWithdrawalsInput {
    accountNumber: String!
    accountHolder: String!
    sum: Float
    status: PaymentStatus

}

enum PaymentStatus {
    PENDING,
    COMPLETED,
    FAILED,
    CANCELLED
}

input CreateCategoryInput {
    name: String!
    isActive: Boolean!
}
input UpdateCategoryInput {
    id: ID!
    name: String
    isActive: Boolean
}
input CreateCoinInput {
    coin: Float!
    won: Float!
}
input UpdateCoinInput {
    id: ID!
    coin: Float
    won: Float
}

input CreateThemeInput{
    name: String!
    koreanTitle: String!
    price: Float!
    nightPrice: Float!
    description: String!
    isPopular: Boolean!
    isActive: Boolean!
    categoryId: ID!
    icon: Upload
}
input UpdateThemeInput{
    id: ID!
    name: String
    koreanTitle: String
    price: Float
    nightPrice: Float
    description: String
    isPopular: Boolean
    isActive: Boolean
    categoryId: ID
    icon: Upload
}
input CreateFrequentlyAskedQuestionsInput {
    question: String!
    answer: String!
    Category: QuestionsCategories!
}
input updateFrequentlyAskedQuestionsInput {
    id: ID!
    question: String
    answer: String
    Category: QuestionsCategories
}



input UserInput {
    phone: String!
    password: String!
    firstName: String!
    lastName: String!
}

input TranslatorProfileInput {
    dateOfBirth: String
    email: String
    isAvailable: Boolean
    isOnline: Boolean
    levelOfKorean: String
    languages: [ID]
    themes: [ID]
}

input LanguageInput {
    name: String!
}

input RegisterUserInput {
    phone: String!
    firstPassword: String!
    secondPassword: String!
}

input LoginUserInput {
    phone: String!
    password: String!
}


input DebtorInput {
    accountHolder: String
    nameOfBank: String
    isPaid: Boolean
    userId: ID!
}

input DepositsInput {
    accountHolder: String
    nameOfBank: String
    coin: Float
    won: Float
    status: String
    userId: ID!
}

input CreateCallInput {
    caller: ID!
    recipient : ID!
    theme : ID!
}
input CallUpdateInput {
    duration: Int!
    status: CallStatus!
    commission: Float!
}
input RatingInput {
    whoUserId: ID!
    toWhomUserId: ID!
   ratings : Float
}

input UpdateRatingInput {
    ratings : Float!
}

input NotificationInput {
    title: String
    text: String
    userId: ID!
}
input WithdrawalsInput {
    accountNumber: String!
    accountHolder: String!
    sum: Float
    status: Status
    userId: ID!
}
input PagingInput {
    pageNo: Int
    pageSize: Int
}


enum EPlatform {
    IOS
    ANDROID
}
enum Status {
    PENDING
    COMPLETED
    CANCELED
}
enum QuestionsCategories {
    Restaurant
    Law
    ENTERTAINMENT
    GROCERY
}
enum CallStatus {
    MISSED_CALL,
    INCOMING_CALL,
    OUTGOING_CALL
}




enum ESort {
    ASC
    DESC
}


#scalar FileUpload
scalar Upload