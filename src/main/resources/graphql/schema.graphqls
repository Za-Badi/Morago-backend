schema {
    query: Query
    mutation: Mutation
}
type Query {
    testUser: [User]
    testTranslator: [User]
    testAuthentication: [User]
    getCoinById(id: ID!): Coin
    getAllCoins: [Coin]
    getAppVersionByPlatform(platform: EPlatform!): AppVersion
    getAllAppVersions:[AppVersion]
    getAllCategories: [Category]
    getCategoryById(id: ID!): Category
    getCategoryByName(name: String!): Category
    getCategoryByStatus(status: Boolean!): [Category]
    getAllThemes:[Theme]
    getThemeById(id: ID!): Theme
    getThemesByCategoriesId(id: ID): [Theme]
    getThemesByName(name: String): Theme
    getThemeByStatus(status: Boolean!): [Theme]
    getAllFrequentlyAskedQuestionById:[FrequentlyAskedQuestionsInput]
    getFrequentlyAskedQuestionById(id: ID!): FrequentlyAskedQuestionsInput
    getAllUsers: [User]
    getUserById(id: ID!): User
    getUserByPhone(phone: String): User
    existsUserByPhone(phone: String): Boolean
    getAuthenticatedUser: User
    getAllUserProfiles: [UserProfile]
    getUserProfileById(id: ID): UserProfile
    getAllTranslatorProfiles: [TranslatorProfile]
    getTranslatorProfileById(id: ID): TranslatorProfile
    getTranslatorProfilesByThemeId(id: ID): [TranslatorProfile]
    getTranslatorProfilesByThemeName(name: String): [TranslatorProfile]
    getTranslatorProfilesByIsOnline(isOnline: Boolean): [TranslatorProfile]
    getAllLanguages: [Language]
    getLanguageById(id: ID): Language

    getAllDeposits: [Deposits]
    getDepositById(id: ID!): Deposits
    getDepositsByStatus(status: Status!):[Deposits]
    getDepositsByUserId(userId: ID!): User

    getAllDebtors: [Debtor]
    getDebtorById(id: ID!): Debtor

    getAllNotification: [Notification]
    getNotificationById(id: ID!): Notification

    getAllWithdrawals: [Withdrawals]
    getWithdrawalById(id: ID!): Withdrawals

    getAllCalls: [Call]
    getCallById(id: ID!): Call
}

type Mutation {
    signUpAsUser(registerUserInput: RegisterUserInput): String
    signUpAsTranslator(registerUserInput: RegisterUserInput): String
    logIn(loginUserInput: LoginUserInput): String
    createAppVersion(platform: EPlatform!, min: String!, latest: String!): AppVersion
    updateAppVersion(platform: EPlatform!, min: String, latest: String): AppVersion
    deleteAppVersion(platform: EPlatform!): Boolean
    createCoin(input: CreateCoinInput): Coin
    updateCoin(input: UpdateCoinInput): Coin
    deleteCoin(id: ID!): Boolean
    createCategory(input: CreateCategoryInput): Category
    updateCategory(input: UpdateCategoryInput): Category
    deleteCategoryById(id: ID!): Boolean
    changeCategoryStatus(id: ID!): Boolean
    createTheme(input: CreateThemeInput): Theme
    updateThemeById(input: UpdateThemeInput): Theme
    deleteThemeById(id: ID!): Boolean
    changeThemeStatus(id: ID!): Boolean
    changeThemePopularity(id: ID): Boolean
    createFrequentlyAskedQuestion(input: CreateFrequentlyAskedQuestionsInput): FrequentlyAskedQuestionsInput
    updateFrequentlyAskedQuestion(input: updateFrequentlyAskedQuestionsInput): FrequentlyAskedQuestionsInput
    deleteFrequentlyAskedQuestionById(id: ID!): Boolean
    addUser(userInput: UserInput): User
    updateUser(id: ID, userInput: UserInput): User
    deleteUser(id: ID): Boolean
    changeIsActive(id: ID): Boolean
    changeIsDebtor(id: ID): Boolean
    addUserProfile(isFreeCallMade: Boolean): UserProfile
    updateUserProfile(id: ID, isFreeCallMade: Boolean): UserProfile
    deleteUserProfile(id: ID): Boolean
    updateUserProfileByUserId(id: ID, isFreeCallMade: Boolean): UserProfile
    changeIsFreeCallMade(id: ID): Boolean
    addTranslatorProfile(translatorProfileInput: TranslatorProfileInput): TranslatorProfile
    updateTranslatorProfile(id: ID, translatorProfileInput: TranslatorProfileInput): TranslatorProfile
    deleteTranslatorProfile(id: ID): Boolean
    updateTranslatorProfileByUserId(id: ID, translatorProfileInput: TranslatorProfileInput): TranslatorProfile
    changeIsAvailable(id: ID): Boolean
    changeIsOnline(id: ID): Boolean
    addLanguageToTranslatorProfile(languageId: ID, translatorProfileId: ID): TranslatorProfile
    deleteLanguageFromTranslatorProfile(languageId: ID, translatorProfileId: ID): Boolean
    addLanguage(languageInput: LanguageInput): Language
    updateLanguage(id: ID, languageInput: LanguageInput): Language
    deleteLanguage(id: ID): Boolean


    addDeposit(depositsDto: DepositsInput): Deposits
    updateDeposit(id: ID!, depositsDto: DepositsInput): Deposits
    deleteDeposit(id: ID!): Boolean

    addDebtor(debtorDto: DebtorInput): Debtor
    updateDebtor(id: ID!, debtorDto: DebtorInput): Debtor
    deleteDebtor(id: ID!): Boolean

    addNotification(notificationDto: NotificationInput): Notification
    updateNotification(id:ID!, notificationDto: NotificationInput):Notification
    deleteNotification(id:ID!): Notification

    addWithdrawal(withdrawalDto: WithdrawalsInput): Withdrawals
    updateWithdrawal(id: ID!, withdrawalDto: WithdrawalsInput): Withdrawals
    deleteWithdrawal(id: ID!): Boolean

    createCall(CallDto : CallInput) : Call
    updateCall(id : ID!, CallDto : CallUpdateInput):Call
    deleteCall(id: ID!): Boolean
    createRating(RatingDto: RatingInput) : Rating
    updateRating(id: ID!, grade: Float): Rating
    deleteRating(id: ID!): Boolean
    addFile(file: Upload!): File
}



type AppVersion {
    platform: EPlatform
    min: String
    latest: String
    createdAt: String
    updatedAt: String
}
type Coin {
    id: ID
    coin: String
    won: String
    createdAt: String
    updatedAt: String
}
type File {
    id: ID
    path: String
    type: String
    originalTitle: String
    createdAt: String
    updatedAt: String
}
type Category {
    id: ID
    name: String
    isActive: Boolean
}
type Theme {
    id: ID
    name: String
    korean_title: String
    price: Float
    nightPrice: Float
    description: String
    isPopular: Boolean
    isActive: Boolean
    category: Category
    icon: File
    createdAt: String
    updatedAt: String
}
type FrequentlyAskedQuestionsInput{
    question: String
    answer: String
    Category: QuestionsCategories
}
type Language {
    id: ID!
    name: String
}
type User {
    id: ID!
    phone: String!
    firstName: String
    lastName: String
    balance: Float
    fcmToken: String
    apnToken: String
    ratings: Float
    totalRatings: Int
    isActive: Boolean
    isDebtor: Boolean
    onBoardingStatus: Int
    translatorProfile: TranslatorProfile
    userProfile: UserProfile
}
type UserProfile {
    id: ID!
    isFreeCallMade: Boolean
}
type TranslatorProfile {
    id: ID!
    dateOfBirth: String
    email: String
    isAvailable: Boolean
    isOnline: Boolean
    levelOfKorean: String
}
type Call {
    id: ID
    caller: User
    recipient: User
    createdAt: String
    duration: Int
    status: String
    sum: Float
    commission: Float
    translatorHasRated: Boolean
    userHasRated: Boolean
    file: File
    theme: Theme
}
type Rating {
    id: ID!
    whoUser: User!
    toWhomUser: User!
    grade: Float
    createdAt: String
    updatedAt: String
    ratings: Float
    totalRatings: Int
}

type Debtor {
    id: ID!
    accountHolder: String!
    nameOfBank: String!
    isPaid: Boolean!
    createdAt: String
    updatedAt: String
    user: User
}
type Deposits {
    id: ID!
    accountHolder: String
    nameOfBank: String
    coin: Float
    won: Float
    status: String!
    createdAt: String
    updatedAt: String
    user: User
}

type Notification {
    id: ID!
    title: String
    text: String
    date: String
    time: String
    user: User
}
type Withdrawals {
    id: ID!
    accountNumber: String!
    accountHolder: String!
    sum: Float!
    status: String!
    createdAt: String
    updatedAt: String
    user: User
}

input CreateCategoryInput {
    name: String!
    is_active: Boolean!
}
input UpdateCategoryInput {
    id: ID!
    name: String
    is_active: Boolean
}
input CreateCoinInput {
    coin: Float!
    won: Float!
}
input UpdateCoinInput {
    id: ID!
    coin: Float
    won: Float
}

input CreateThemeInput{
    name: String!
    korean_title: String!
    price: Float!
    nightPrice: Float
    description: String
    isPopular: Boolean
    isActive: Boolean
    categoryId: ID!
#    file: FileUpload
}
input UpdateThemeInput{
    id: ID!
    name: String
    korean_title: String
    price: Float
    nightPrice: Float
    description: String
    isPopular: Boolean
    isActive: Boolean
    categoryId: ID
#    file: Upload
}
input CreateFrequentlyAskedQuestionsInput {
    question: String!
    answer: String!
    Category: QuestionsCategories!
}
input updateFrequentlyAskedQuestionsInput {
    id: ID!
    question: String
    answer: String
    Category: QuestionsCategories
}



input UserInput {
    phone: String!
    password: String!
    firstName: String!
    lastName: String!
}

input TranslatorProfileInput {
    dateOfBirth: String
    email: String
    isAvailable: Boolean
    isOnline: Boolean
    levelOfKorean: String
    languages: [ID]!
}

input LanguageInput {
    name: String!
}

input RegisterUserInput {
    phone: String!
    firstPassword: String!
    secondPassword: String!
}

input LoginUserInput {
    phone: String!
    password: String!
}


input DebtorInput {
    accountHolder: String
    nameOfBank: String
    isPaid: Boolean
    userId: ID!
}

input DepositsInput {
    accountHolder: String
    nameOfBank: String
    coin: Float
    won: Float
    status: String
    userId: ID!
}

input CallInput {
    caller: ID!
    recipient : ID!
}
input CallUpdateInput {
    duration: Int
    status: String
    commission: Float
}
input RatingInput {
    callId: ID!
    whoUserId: ID!
    toWhomUserId: ID!
    grade: Float!
}
input NotificationInput {
    title: String
    text: String
    userId: ID!
}
input WithdrawalsInput {
    accountNumber: String!
    accountHolder: String!
    sum: Float
    status: Status
    userId: ID!
}

enum EPlatform {
    IOS
    ANDROID
}
enum Status {
    PENDING
    COMPLETED
    CANCELED
}
enum QuestionsCategories {
    Restaurant
    Law
    ENTERTAINMENT
    GROCERY
}
scalar Upload
#scalar FileUpload